// Package infrastructure provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package infrastructure

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create New User
	// (POST /users)
	CreateUser(w http.ResponseWriter, r *http.Request)
	// Get User Info by User ID
	// (GET /users/{userId})
	FindUserByID(w http.ResponseWriter, r *http.Request, userId int)
	// Update User Information
	// (PATCH /users/{userId})
	UpdateUserByID(w http.ResponseWriter, r *http.Request, userId int)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateUser(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// FindUserByID operation middleware
func (siw *ServerInterfaceWrapper) FindUserByID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userId" -------------
	var userId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, chi.URLParam(r, "userId"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FindUserByID(w, r, userId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateUserByID operation middleware
func (siw *ServerInterfaceWrapper) UpdateUserByID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userId" -------------
	var userId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, chi.URLParam(r, "userId"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateUserByID(w, r, userId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/users", wrapper.CreateUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users/{userId}", wrapper.FindUserByID)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/users/{userId}", wrapper.UpdateUserByID)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xW3W7jRBR+FevApdM4aaXd+Gq3210UIboIKDelF1N74kzX9piZSbuhioRjWEApWlSh",
	"lsKKnwuqQqEU8SdQgYeZJpS3QDO2k9RJt1y0iCvPzDkz5+f7zjneBIcGEQ1xKDjYm8CdJg6QXt5ljDK1",
	"iBiNMBME62OHulh9XcwdRiJBaAh2qmxomQkNygIkwAYSitkqmCDaEU632MMMOiYEmHPkXfhQLh5e5YKR",
	"0INOxwSGX28Rhl2wlyEzmKuvdExYxBtLHE9x3EUC32/MEyaaajt0Up1PGjIBB4j45zTTkymqDcK4WESB",
	"jmdC6qMLhYVwRu+M3co9WTFBEOGr63mMQ1fo6hp2hDKWx44foiDyVeTLhdChUqvdKFWs0mxl+LYNyCcO",
	"nuEBEc1bnjqbcWiQy1/FjDSI8lGwFj4XL9xWF8EE4oJdmauOhwsvq+fABE68cClaUIm2oWpVaiXrZqk6",
	"B50Vs8guhpHAqWaRGjLZl8mJ7P4sk5NB8nb/8+9lfHT6+5PBux8Mdr8c7HXHqXcRqgUWZGkqZuUqyVHI",
	"4NOikvGWTL5Qi+Tw7Ov3zw5OZHe7f7R1+tsjGe/KeF/Gb8luT8Y9GX8l40dq8Wb3tXBCZUvGxwoqLR05",
	"tUqpj1F4OWXJpY4e6W1Pn3xXX5iZWuX/nvnEBfPp9C8mcqwcpteCMkHCBk2bViiQIzTiGeGb1MO3Mvgz",
	"rocpawV60Gojo009qhlzLgtVqzpbtmbLVlXGh3/v9Prdb2S8J7u9fu+9/skvpycf//XhgUpP9yeZ/CCT",
	"XZkc3n6xDiNvaYRDFBEwYR0znr5ambGUqVxkw+yMOjIhQqKpC6Pc4pjpVUS5uASd7vZg5/hs/3FaHKl/",
	"oJ9nSOnXXbDhji61LHcKC8zFPHXbeb5wqM2gKPKJo6+V17iylU8JtXqW4QbY8Ex5NEbK2Qwp512q00nR",
	"5hENeVrmVatyZWZyG0Wk1LmRBumq5M5Z1pXZTGfjFKMvEM5J6BkvZdw26mHaIZRYO1G7fifuKoobt32G",
	"kds2XkEPcKgLjreCALH2EHtjEW8YefEgT80KUDSDFaWdMq68qT51t6O88fAU5hFXxocy+VQmiUxi3YQ+",
	"m9Kqu9v9xzv9P3YvYOM9ErrKlfl2fQEm2GJdO1vuP5/CM3f98GhiLlJh3KOt0C0g8xwWGhJNHGO1nW0W",
	"JiFSzYGhAAvdF5YnG8I7GoI/ZbKnF7/K+LD/7Uf9JwcpBIV+rk0QdVP1nFE3TOGH8Xad/gSMslBs/Hqs",
	"I+E0Lx0iQ24MPvlxsHN8ATeWIjfrVEN2/Mfdam4ykkVq3Mns/i+IkyZpxJ286Yx4oyEp5QWuLmO2Pp08",
	"PnWQ31SDxoQW0+NSiMgul4cC+6ZVs/QPXPb85jhhtOBhSTGChcgHu4F8jtURFzTyidfUOVK/GRBs1BC7",
	"gW6+sbbuO9Dp/BMAAP//tVYEg5MMAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
