openapi: 3.1.0
x-stoplight:
  id: mw9ar7a8zjvlc
info:
  title: openapi
  version: '1.0'
  description: 2023/03/02に開催する勉強会用のサンプルAPI
servers:
  - url: 'http://localhost:8090'
    description: localhost
paths:
  '/users/{userId}':
    parameters:
      - schema:
          type: integer
        name: userId
        in: path
        required: true
        description: Id of an existing user.
    get:
      summary: Get User Info by User ID
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User Not Found
      operationId: get-user
      description: idにマッチしたユーザー情報を取得する
    patch:
      summary: Update User Information
      operationId: patch-users-userId
      responses:
        '204':
          description: No Content
        '404':
          description: User Not Found
        '409':
          description: Email Already Taken
      description: ユーザーの情報を更新する
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                  description: 'If a new email is given, the user''s email verified property will be set to false.'
                dateOfBirth:
                  type: string
            examples:
              Update First Name:
                value:
                  firstName: Rebecca
              Update Email:
                value:
                  email: rebecca@gmail.com
              Update Last Name & Date of Birth:
                value:
                  lastName: Baker
                  dateOfBirth: '1985-10-02'
        description: Patch user properties to update.
  /users:
    post:
      summary: Create New User
      operationId: post-user
      responses:
        '200':
          description: User Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                New User Bob Fellow:
                  value:
                    id: 12
                    firstName: Bob
                    lastName: Fellow
                    email: bob.fellow@gmail.com
                    dateOfBirth: '1996-08-24'
                    emailVerified: false
                    createDate: '2020-11-18'
            application/xml:
              schema:
                type: object
                properties: {}
            multipart/form-data:
              schema:
                type: object
                properties: {}
        '400':
          description: Missing Required Information
        '409':
          description: Email Already Taken
      description: ユーザーを新規作成する
    parameters: []
components:
  schemas:
    User:
      title: User
      type: object
      examples:
        - id: 142
          firstName: Alice
          lastName: Smith
          email: alice.smith@gmail.com
          dateOfBirth: '1997-10-31'
          emailVerified: true
          signUpDate: '2019-08-24'
      properties:
        id:
          type: integer
          description: Unique identifier for the given user.
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        dateOfBirth:
          type: string
          format: date
          example: '1997-10-31'
        emailVerified:
          type: boolean
          description: Set to true if the user's email has been verified.
        createDate:
          type: string
          format: date
          description: The date that the user was created.
        '':
          type: string
      required:
        - id
        - firstName
        - lastName
        - email
        - emailVerified
  requestBodies:
    NewUser:
      content:
        application/json:
          schema:
            type: object
            properties:
              firstName:
                type: string
              lastName:
                type: string
              email:
                type: string
                format: email
              dateOfBirth:
                type: string
                format: date
            required:
              - dateOfBirth
          examples:
            Example 1:
              value:
                firstName: string
                lastName: string
                email: user@example.com
                dateOfBirth: '2019-08-24'
      description: ''
x-internal: false
